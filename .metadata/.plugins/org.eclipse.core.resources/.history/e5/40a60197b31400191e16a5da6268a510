package com.jp.lms.source.controllers;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.websocket.server.PathParam;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMethod;

import org.springframework.web.bind.annotation.RestController;

import com.jp.lms.source.entities.Property;
import com.jp.lms.source.entities.Prospect;
import com.jp.lms.source.exceptions.LmsException;
import com.jp.lms.source.services.ServiceApproveLoan;
import com.jp.lms.source.services.ServiceNewLoanAppl;
import com.jp.lms.source.services.ServiceProperty;
import com.jp.lms.source.services.ServiceProspect;

//import com.jp.lms.source.services.ServiceProspect;



/*
 * @Controller: A kind of @Component to declare SpringMVC controllers.
 * @RequestMapping: To map a controlling method to the URL.
 * @RequestParam: To take single QueryString or FormData field value.
 * 
 * Multi-action controllers.
 * 
 * http://localhost:8082/prospects/list
 * http://localhost:8082/Loan_Management_System/prospectDetails
 * http://localhost:8082/Loan_Management_System/register
 * 
 */
@CrossOrigin(origins = "*", allowedHeaders = "*",methods={RequestMethod.GET,RequestMethod.POST,RequestMethod.PUT,RequestMethod.DELETE})
@RestController
public class PropertyController {
	@Autowired
	@Qualifier("serviceProperty")
	private ServiceProperty serviceProperty;
	
	@GetMapping(value="/propertyDetails/{id}",produces="application/json")
	public Prospect getProspectDetails(@PathVariable(value="id") Long propertyId){
		Property property = null;
		try {
			property = serviceProperty.getPropertyDetails(propertyId);
		} catch (LmsException e) {
			e.printStackTrace();
		}
		return property;
	}
	
	@PutMapping(value="/updateProperty",consumes="application/json")
	public Long updateProspectDetails(@RequestBody Property property) throws LmsException{
		return serviceProperty.updateProperty(property);
	}
}
