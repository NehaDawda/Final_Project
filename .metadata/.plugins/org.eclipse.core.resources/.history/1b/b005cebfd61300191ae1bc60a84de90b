package com.jp.lms.source.services;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.jp.lms.source.daos.DaoCustomer;
import com.jp.lms.source.daos.DaoProperty;
import com.jp.lms.source.daos.DaoProspect;
import com.jp.lms.source.entities.Customer;
import com.jp.lms.source.entities.HomeLoan;
import com.jp.lms.source.entities.Property;
import com.jp.lms.source.entities.Prospect;
import com.jp.lms.source.exceptions.LmsException;

@Service("service")
public class ServiceProspectImpl implements ServiceProspect {
	
	@Autowired
	@Qualifier("daoDS") 
	private DaoProspect daoProspect;	
	
	@Autowired
	@Qualifier("daoCust") 
	private DaoCustomer daoCustomer;
	
	@Autowired
	@Qualifier("daoProperty") 
	private DaoProperty daoProperty;
	
	@Override
	public List<Prospect> getProspectList() throws LmsException {
		return daoProspect.getAllPropects();
	}

	@Override
	public Prospect getProspectDetails(String prospectId) throws LmsException {
		return daoProspect.getProspectDetails(prospectId);
	}

	@Override
	public List<Prospect> getProspectsByStatus(String status) throws LmsException {
		return daoProspect.getProspectsByStatus(status);
	}

	
	@Override
	@Transactional(propagation=Propagation.REQUIRES_NEW, rollbackFor=LmsException.class)
	public String registerProspect(Prospect prospect) throws LmsException {
		return daoProspect.addProspect(prospect);
	}

	@Override
	@Transactional(propagation=Propagation.REQUIRES_NEW, rollbackFor=LmsException.class)
	public String updateProspect(Prospect prospect) throws LmsException {
		return daoProspect.updateProspect(prospect);
	}

	@Override
	public String approveProspectLoan(Prospect prospect) throws LmsException {
		String prospectId = updateProspect(prospect);
		
		Customer customer = new Customer();
		customer.setFirstName(prospect.getFirstName());
		customer.setLastName(prospect.getLastName());
		customer.setAddress(prospect.getAddress());
		customer.setPanNumber(prospect.getPanNumber());
		customer.setAadharNumber(prospect.getAadharNumber());
		customer.setContactNumber(prospect.getContactNumber());
		customer.setEmail(prospect.getEmail());
		customer.setDateOfBirth(prospect.getDateOfBirth());
		customer.setCreditLimit(prospect.getCreditLimit());
		customer.setLastUpdatedCreditDate(prospect.getLastUpdatedCreditDate());
		
		String customerId = daoCustomer.addCustomer(customer);
		
		if(prospect.getLoanType().equals("HOME_LOAN")){
			HomeLoan homeLoan = new HomeLoan();
			homeLoan.setLoanAmount(prospect.getRequiredLoanAmt());
			homeLoan.setCustomerId(customerId);
			homeLoan.setLoanApproveDate(new Date());
			homeLoan.setInterestRate(8.99d);
			homeLoan.setTenure(240);
			homeLoan.setCreditLimit(prospect.getCreditLimit());
			homeLoan.setLastUpdatedCreditLimit(prospect.getLastUpdatedCreditDate());
			
			Property property = null;
			homeLoan.setProperty(property);
		}
		
		return null;
	}

	
	/*@Override
	@Transactional(propagation=Propagation.REQUIRES_NEW, rollbackFor=LmsException.class)
	public String removeProspect(String prospectId) throws LmsException {
		return daoProspect.removeProspect(prospectId);
	}*/

}
